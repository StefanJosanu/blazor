@page "/products"
@using System.Net.Http.Json
@using BlazorEcommerce.Client.Shared
@inject HttpClient httpClient
@inject IProductService ProductService
@inject ILocationService LocationService
@inject NavigationManager navigation
@inject IDialogService DialogService

@if(products != null)
{ 
        <div class="table_container">
        <div class="container">
            <h1>Product List</h1>
            <MudTable Items="@products" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <ToolBarContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateDialogAsync">Add Product</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Short Description</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Stock Quantity</MudTh>
                    <MudTh>Stock Location Name</MudTh>
                    <MudTh>Stock Location Address</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Short Description">@context.ShortDescription</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Price">@context.Price</MudTd>
                    <MudTd DataLabel="Stock Quantity">@context.StockQuantity</MudTd>
                    <MudTd DataLabel="Stock Location Name">@context.StockLocationName</MudTd>
                    <MudTd style="width: 12vw;" DataLabel="Stock Location Address">@context.StockLocationAddress</MudTd>
                    <MudTd style="width: 10vw;">

                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="()=>OpenDeletePopUp(context.Id, context.Name)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Inherit" Title="Delete" />
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </div>
        </div>

        <div class="table_container">
            <MudPopover Open="@isDeleteOpen" OverflowBehavior="OverflowBehavior.FlipAlways" Paper="true" Fixed="true">
                <div class="d-flex flex-column">
                    <MudText>Sigur doresti sa stergi produsul @SelectedName?</MudText>
                </div>
                <br />
                <div class="buttons">
                    <MudButton OnClick="@ToggleDelete" Color="Color.Inherit">Nu</MudButton>
                    <MudButton OnClick="@DeleteProduct" Color="Color.Error">Da</MudButton>
                </div>
            </MudPopover>
        </div>
}

@if (products == null)
{
    <div class="container">
        <span>Loading...</span>
    </div>
}

@if (products != null && products.Count == 0)
{
    <div class="container">
        <span>Product List is empty.</span>
    </div>
}

@code {
    private List<GetProductDTO> products { get; set; }
    public CreateProductDTO product = new CreateProductDTO();


    public Guid? SelectedId { get; set; }
    public string? SelectedName { get; set; }
    private bool isDeleteOpen = false;
    private bool isEditOpen = false;
    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProducts();
    }
    private Task OpenCreateDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<Shared.CreateDialog>("Create Product", options);
    }
    public async Task OpenDeletePopUp(Guid id, string name)
    {
        SelectedId = id;
        SelectedName = name;
        isDeleteOpen = true;
    }
    public async Task DeleteProduct()
    {
        if (SelectedId != null || SelectedId != Guid.Empty)
            await ProductService.DeleteProduct(SelectedId.Value);
        navigation.NavigateTo(navigation.Uri, true);
    }
    @* private Task OpenDialogAsync(Guid id, string name)
    {

        var parameters = new DialogParameters<Shared.DeleteProductDialog>
        {
            { x => x.SelectedId, SelectedId },
            { x => x.SelectedName, SelectedName }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<Shared.DeleteProductDialog>("Delete Dialog", parameters, options);
    } *@
    private async Task ToggleDelete() => isDeleteOpen = !isDeleteOpen;
}
