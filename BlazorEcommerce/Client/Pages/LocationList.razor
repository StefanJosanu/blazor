@page "/locations"
@using BlazorEcommerce.Shared
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject ILocationService locationService
@inject NavigationManager navigation
@inject IDialogService DialogService

<div class="table_container">
    <MudPopover Open="@isOpen" OverflowBehavior="OverflowBehavior.FlipAlways" Paper="true" Fixed="true">

    </MudPopover>
</div>
@if (locations != null)
{
    <div class="table_container">
        <div class="container">
            <h1>Location List</h1>
            <MudTable Items="@locations" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <ToolBarContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateDialogAsync">Add Location</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Address</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Address">@context.Address</MudTd>
                    <MudTd style="width: 10vw;">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenEditPopUp(context.Id)">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Title="Edit" />
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    </div>
}

@if (locations == null)
{
    <div class="container">
         <span>Location List is empty.</span>
    </div>
}

@if (locations != null && locations.Count == 0)
{
    <div class="container">
        <span>Location List is empty.</span>
    </div>
}

@code {
    private List<LocationDTO> locations { get; set; }
    private LocationManagementDTO location = new LocationManagementDTO();
    private bool isOpen = false;
    private Guid? SelectedId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        locations = await locationService.GetLocations();
    }
    private Task OpenCreateDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<Shared.CreateLocationDialog>("Create Location", options);
    }
    private void ToggleOpen() => isOpen = !isOpen;
    private async Task OpenEditPopUp(Guid? id)
    {
        SelectedId = id;
        isOpen = true;
    }

    private async Task EditLocation(LocationManagementDTO locationToUpdate)
    {
        location = locationToUpdate;
        locationService.UpdateLocation(locationToUpdate);
    }
}